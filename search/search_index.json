{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BeIR-Qdrant","text":"<p>BEIR is a heterogeneous benchmark containing diverse IR tasks. This project integrates BEIR with Qdrant - a vector search engine.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install beir-qdrant\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<p>The following example demonstrates how to use BEIR with Qdrant dense search. The example uses the SciFact dataset and <code>all-MiniLM-L6-v2</code> model from Sentence Transformers to generate the dense embeddings.</p> <pre><code>from beir import util\nfrom beir.datasets.data_loader import GenericDataLoader\nfrom beir.retrieval.evaluation import EvaluateRetrieval\nfrom qdrant_client import QdrantClient\n\nfrom beir_qdrant.retrieval.models.fastembed import DenseFastEmbedModelAdapter\nfrom beir_qdrant.retrieval.search.dense import DenseQdrantSearch\n\n# Download and load the dataset\ndataset = \"scifact\"\nurl = \"https://public.ukp.informatik.tu-darmstadt.de/thakur/BEIR/datasets/{}.zip\".format(dataset)\ndata_path = util.download_and_unzip(url, \"datasets\")\ncorpus, queries, qrels = GenericDataLoader(data_folder=data_path).load(split=\"test\")\n\n# Connect to Qdrant running on localhost\nqdrant_client = QdrantClient(\"http://localhost:6333\")\n\n# Create the retriever and evaluate it on the test set using\n# one of the sentence-transformers models available in FastEmbed\nmodel = DenseQdrantSearch(\n    qdrant_client,\n    model=DenseFastEmbedModelAdapter(\n        model_name=\"sentence-transformers/all-MiniLM-L6-v2\"\n    ),\n    collection_name=\"scifact-all-MiniLM-L6-v2\",\n    initialize=True,\n)\nretriever = EvaluateRetrieval(model)\nresults = retriever.retrieve(corpus, queries)\n\nndcg, _map, recall, precision = retriever.evaluate(qrels, results, retriever.k_values)\n</code></pre> <p>The example above demonstrates how to use the dense embeddings, but changing the search mode is as simple as changing the model implementation.</p>"},{"location":"#supported-modes","title":"Supported Modes","text":"<p>Qdrant supports different search modes, including:</p> <ul> <li>Dense search: <code>beir_qdrant.retrieval.search.dense.DenseQdrantSearch</code></li> <li>Sparse search: <code>beir_qdrant.retrieval.search.sparse.SparseQdrantSearch</code></li> <li>Multi vector search: <code>beir_qdrant.retrieval.search.multi_vector.MultiVectorQdrantSearch</code></li> <li>Hybrid search with RRF: <code>beir_qdrant.retrieval.search.hybrid.RRFHybridQdrantSearch</code></li> </ul>"}]}